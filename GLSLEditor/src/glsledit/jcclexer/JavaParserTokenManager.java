/* Generated By:JavaCC: Do not edit this line. JavaParserTokenManager.java */
package glsledit.jcclexer;
import java.io.*;

public class JavaParserTokenManager implements JavaParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8L) != 0L || (active4 & 0x1008000000000000L) != 0L)
            return 48;
         if ((active4 & 0x100000000L) != 0L || (active5 & 0x10L) != 0L)
            return 5;
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0x3ffL) != 0L)
         {
            jjmatchedKind = 277;
            return 29;
         }
         return -1;
      case 1:
         if ((active0 & 0x8L) != 0L)
            return 46;
         if ((active0 & 0xfffffc1bfe7fff00L) != 0L || (active1 & 0xf7fff7ffffffffffL) != 0L || (active2 & 0xffffffefffffdfffL) != 0L || (active3 & 0xfffffffffffffffeL) != 0L || (active4 & 0x3fbL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x3e401800000L) != 0L || (active1 & 0x800080000000000L) != 0L || (active2 & 0x1000002000L) != 0L || (active3 & 0x1L) != 0L || (active4 & 0x4L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0xffff6edaff7fff00L) != 0L || (active1 & 0xf7fff7fffffefffdL) != 0L || (active2 & 0xffffffefffff9fffL) != 0L || (active3 & 0xfffffeffffffffdeL) != 0L || (active4 & 0x3fbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x910100000000L) != 0L || (active1 & 0x800080000010002L) != 0L || (active2 & 0x1000006000L) != 0L || (active3 & 0x10000000021L) != 0L || (active4 & 0x4L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0xefff2bd8797b2700L) != 0L || (active1 & 0xf7fffffffffebbecL) != 0L || (active2 & 0x7f7f7fef3af3bfbfL) != 0L || (active3 & 0xffffeefffffbbfffL) != 0L || (active4 & 0x2feL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 3;
            }
            return 29;
         }
         if ((active0 & 0x100044028604d800L) != 0L || (active1 & 0x4411L) != 0L || (active2 & 0x80808000c50c0040L) != 0L || (active3 & 0x100000044000L) != 0L || (active4 & 0x101L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x8ddf2b9809621700L) != 0L || (active1 & 0x77dfeffeffecf92cL) != 0L || (active2 & 0x6f777befffffbfbfL) != 0L || (active3 & 0xfffdeefffff3bf7dL) != 0L || (active4 & 0x2feL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x6220004070192000L) != 0L || (active1 & 0x80201001001202c0L) != 0L || (active2 & 0x1008040000000000L) != 0L || (active3 & 0x2000000080082L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x8907238848621500L) != 0L || (active1 & 0x77dfeefeffecf82cL) != 0L || (active2 & 0x6f777bef3af3bfbfL) != 0L || (active3 & 0xfffdeebedff9bf7dL) != 0L || (active4 & 0x2feL) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x44d8081001000200L) != 0L || (active1 & 0x10000000100L) != 0L || (active2 & 0xc50c0000L) != 0L || (active3 & 0x4120020000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x8904238800220500L) != 0L || (active1 & 0x77dfeefefdccf820L) != 0L || (active2 & 0x6f577bef3af3bfbfL) != 0L || (active3 & 0xff7deebed7f9bf7dL) != 0L || (active4 & 0x2feL) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0x3000048401000L) != 0L || (active1 & 0x220000cL) != 0L || (active2 & 0x20000000000000L) != 0L || (active3 & 0x80000008000000L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x8804238800000400L) != 0L || (active1 & 0x77dfeefefdc8d800L) != 0L || (active2 & 0x6e545ba92af3bfbdL) != 0L || (active3 & 0xff7de4bed7f99f7dL) != 0L || (active4 & 0x2feL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 7;
            }
            return 29;
         }
         if ((active0 & 0x100000000220100L) != 0L || (active1 & 0x42020L) != 0L || (active2 & 0x103204610000002L) != 0L || (active3 & 0xa0000002000L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x800208800000000L) != 0L || (active1 & 0x579feefefdc05800L) != 0L || (active2 & 0x6c557bef1a61b6adL) != 0L || (active3 & 0x517d420cc7b91779L) != 0L || (active4 & 0x2d6L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 8;
            }
            return 29;
         }
         if ((active0 & 0x8004030000000400L) != 0L || (active1 & 0x2040000000088000L) != 0L || (active2 & 0x200000020920910L) != 0L || (active3 & 0xae00a4b210408804L) != 0L || (active4 & 0x28L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x800200000000000L) != 0L || (active1 & 0x77cfcc78bdc85000L) != 0L || (active2 & 0x4e15336f1a61b3bdL) != 0L || (active3 & 0xdf7dc62c53f99f7dL) != 0L || (active4 & 0xfeL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 9;
            }
            return 29;
         }
         if ((active0 & 0x8800000000L) != 0L || (active1 & 0x10228640000800L) != 0L || (active2 & 0x2040488000000400L) != 0L || (active3 & 0x84000000L) != 0L || (active4 & 0x200L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x800200000000000L) != 0L || (active1 & 0x65dbec38b9c85000L) != 0L || (active2 & 0x6e55206b0a61b1bdL) != 0L || (active3 & 0xde11860093f99b7dL) != 0L || (active4 & 0x2feL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 10;
            }
            return 29;
         }
         if ((active1 & 0x1204004004000000L) != 0L || (active2 & 0x130410000200L) != 0L || (active3 & 0x16c402c40000400L) != 0L)
            return 29;
         return -1;
      case 11:
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x63d8ec78b9885000L) != 0L || (active2 & 0x605402290a6133bdL) != 0L || (active3 & 0xcf25860c92599359L) != 0L || (active4 & 0x2feL) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 11;
            }
            return 29;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x403000000400000L) != 0L || (active2 & 0xe01204200008000L) != 0L || (active3 & 0x1010000001a00824L) != 0L)
            return 29;
         return -1;
      case 12:
         if ((active1 & 0x43d0ec78b8885000L) != 0L || (active2 & 0x205522290041328cL) != 0L || (active3 & 0xc925840c82181359L) != 0L || (active4 & 0x27eL) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 12;
            }
            return 29;
         }
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x2008000001000000L) != 0L || (active2 & 0x400000000a200131L) != 0L || (active3 & 0x600020010418000L) != 0L || (active4 & 0x80L) != 0L)
            return 29;
         return -1;
      case 13:
         if ((active1 & 0x190ec58b8884000L) != 0L || (active2 & 0x20512028004112adL) != 0L || (active3 & 0x4321840c90589319L) != 0L || (active4 & 0x246L) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 13;
            }
            return 29;
         }
         if ((active1 & 0x4240002000001000L) != 0L || (active2 & 0x4020100002000L) != 0L || (active3 & 0x8804000002000040L) != 0L || (active4 & 0x38L) != 0L)
            return 29;
         return -1;
      case 14:
         if ((active1 & 0x180cc18b8800000L) != 0L || (active2 & 0x100028004112a9L) != 0L || (active3 & 0x4b25000890509101L) != 0L || (active4 & 0x20eL) != 0L)
         {
            if (jjmatchedPos != 14)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 14;
            }
            return 29;
         }
         if ((active1 & 0x10204000084000L) != 0L || (active2 & 0x2041200000000004L) != 0L || (active3 & 0x840400080218L) != 0L || (active4 & 0x40L) != 0L)
            return 29;
         return -1;
      case 15:
         if ((active1 & 0x1804c18b8800000L) != 0L || (active2 & 0x100028004112a9L) != 0L || (active3 & 0x4b25000400001101L) != 0L || (active4 & 0xeL) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 15;
            return 29;
         }
         if ((active1 & 0x800000000000L) != 0L || (active3 & 0x890508000L) != 0L || (active4 & 0x200L) != 0L)
            return 29;
         return -1;
      case 16:
         if ((active1 & 0x81030000000L) != 0L || (active2 & 0x100028004110a1L) != 0L || (active3 & 0x4a05000400001101L) != 0L || (active4 & 0xeL) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 16;
            return 29;
         }
         if ((active1 & 0x180440888800000L) != 0L || (active2 & 0x208L) != 0L || (active3 & 0x120000000000000L) != 0L)
            return 29;
         return -1;
      case 17:
         if ((active1 & 0x81010000000L) != 0L || (active2 & 0x100028004010a1L) != 0L || (active3 & 0x4a04000400000101L) != 0L || (active4 & 0xcL) != 0L)
         {
            if (jjmatchedPos != 17)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 17;
            }
            return 29;
         }
         if ((active1 & 0x20000000L) != 0L || (active2 & 0x10000L) != 0L || (active3 & 0x1000000001000L) != 0L || (active4 & 0x2L) != 0L)
            return 29;
         return -1;
      case 18:
         if ((active1 & 0x30000000L) != 0L || (active2 & 0x2000401000L) != 0L || (active3 & 0x4805000400000101L) != 0L || (active4 & 0xaL) != 0L)
         {
            if (jjmatchedPos != 18)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 18;
            }
            return 29;
         }
         if ((active1 & 0x81000000000L) != 0L || (active2 & 0x100008000000a1L) != 0L || (active3 & 0x200000000000000L) != 0L || (active4 & 0x4L) != 0L)
            return 29;
         return -1;
      case 19:
         if ((active1 & 0x1030000000L) != 0L || (active2 & 0x10002800401000L) != 0L || (active3 & 0x4001000400000101L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 19;
            return 29;
         }
         if ((active2 & 0x20L) != 0L || (active3 & 0x804000000000000L) != 0L || (active4 & 0x8L) != 0L)
            return 29;
         return -1;
      case 20:
         if ((active1 & 0x1030000000L) != 0L || (active2 & 0x10000800401000L) != 0L || (active3 & 0x4001000000000100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 20;
            return 29;
         }
         if ((active2 & 0x2000000000L) != 0L || (active3 & 0x400000001L) != 0L)
            return 29;
         return -1;
      case 21:
         if ((active1 & 0x1030000000L) != 0L || (active2 & 0x10000800401000L) != 0L || (active3 & 0x1000000000100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 21;
            return 29;
         }
         if ((active3 & 0x4000000000000000L) != 0L)
            return 29;
         return -1;
      case 22:
         if ((active1 & 0x1030000000L) != 0L || (active2 & 0x10000800401000L) != 0L || (active3 & 0x1000000000100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 22;
            return 29;
         }
         return -1;
      case 23:
         if ((active1 & 0x1030000000L) != 0L || (active2 & 0x10000800401000L) != 0L || (active3 & 0x1000000000100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 23;
            return 29;
         }
         return -1;
      case 24:
         if ((active1 & 0x1030000000L) != 0L || (active2 & 0x10000800401000L) != 0L || (active3 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 24)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 24;
            }
            return 29;
         }
         if ((active3 & 0x1000000000000L) != 0L || (active4 & 0x2L) != 0L)
            return 29;
         return -1;
      case 25:
         if ((active1 & 0x30000000L) != 0L || (active2 & 0x800401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 25)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 25;
            }
            return 29;
         }
         if ((active1 & 0x1000000000L) != 0L || (active2 & 0x10000000000000L) != 0L)
            return 29;
         return -1;
      case 26:
         if ((active1 & 0x20000000L) != 0L)
            return 29;
         if ((active1 & 0x10000000L) != 0L || (active2 & 0x10000800401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 26;
            return 29;
         }
         return -1;
      case 27:
         if ((active2 & 0x10000000000000L) != 0L || (active4 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 27)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 27;
            }
            return 29;
         }
         if ((active1 & 0x10000000L) != 0L || (active2 & 0x800401000L) != 0L || (active3 & 0x100L) != 0L)
            return 29;
         return -1;
      case 28:
         if ((active2 & 0x10000000401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 28;
            return 29;
         }
         return -1;
      case 29:
         if ((active2 & 0x10000000401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 29;
            return 29;
         }
         return -1;
      case 30:
         if ((active2 & 0x10000000401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 30;
            return 29;
         }
         return -1;
      case 31:
         if ((active2 & 0x10000000401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 31;
            return 29;
         }
         return -1;
      case 32:
         if ((active2 & 0x10000000401000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 32;
            return 29;
         }
         return -1;
      case 33:
         if ((active2 & 0x10000000401000L) != 0L || (active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 33;
            return 29;
         }
         if ((active4 & 0x2L) != 0L)
            return 29;
         return -1;
      case 34:
         if ((active3 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 34)
            {
               jjmatchedKind = 277;
               jjmatchedPos = 34;
            }
            return 29;
         }
         if ((active2 & 0x10000000401000L) != 0L)
            return 29;
         return -1;
      case 35:
         if ((active2 & 0x400000L) != 0L || (active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 35;
            return 29;
         }
         return -1;
      case 36:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 36;
            return 29;
         }
         if ((active3 & 0x100L) != 0L)
            return 29;
         return -1;
      case 37:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 37;
            return 29;
         }
         return -1;
      case 38:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 38;
            return 29;
         }
         return -1;
      case 39:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 39;
            return 29;
         }
         return -1;
      case 40:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 40;
            return 29;
         }
         return -1;
      case 41:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 41;
            return 29;
         }
         return -1;
      case 42:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 42;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 292;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000L, 0x0L);
      case 37:
         jjmatchedKind = 311;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1L);
      case 38:
         jjmatchedKind = 308;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000200000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 280);
      case 41:
         return jjStopAtPos(0, 281);
      case 42:
         jjmatchedKind = 306;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 304;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x200400000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 287);
      case 45:
         jjmatchedKind = 305;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400800000000000L, 0x0L);
      case 46:
         jjmatchedKind = 288;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x10L);
      case 47:
         jjmatchedKind = 307;
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 295);
      case 59:
         return jjStopAtPos(0, 286);
      case 60:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x100020000000000L, 0x2L);
      case 61:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x10000000000L, 0x0L);
      case 62:
         jjmatchedKind = 327;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000L, 0x6cL);
      case 63:
         return jjStopAtPos(0, 294);
      case 64:
         return jjStopAtPos(0, 289);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x18000L, 0x4100000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 284);
      case 93:
         return jjStopAtPos(0, 285);
      case 94:
         jjmatchedKind = 310;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xf00L, 0x10000L, 0x4000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7000L, 0x2000160200L, 0x40L, 0x8000210L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f8000L, 0x80L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c00000L, 0x800000000000000L, 0x0L, 0x46400L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L, 0x0L, 0x2L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f0000000L, 0x4008002200100L, 0x40000000000L, 0x2010000080000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x45c04418bcc88000L, 0x401010280260108aL, 0x6001402801a01100L, 0xc2L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3fc00000000L, 0x8030380000000000L, 0xc00489000002000L, 0x1L, 0x14L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x10100000000L, 0x0L, 0xa0000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x80808000c50c0000L, 0x0L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x780000000000L, 0x2000L, 0x100000L, 0x4120020000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L, 0x20L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf000000000000L, 0x1000000L, 0x100000000L, 0x1010000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x20000000000000L, 0x80000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xfe0000000000000L, 0x8000000000000L, 0x103204610000000L, 0x8f40a48200000000L, 0x28L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf000000000000000L, 0x3200004400000003L, 0x200030008820f31L, 0x2c0014d041880cL, 0x200L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3820240004804L, 0x304c000020000004L, 0x1000020000c0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x438L, 0x0L, 0x0L, 0x101L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 282);
      case 124:
         jjmatchedKind = 309;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4000100000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 283);
      case 126:
         return jjStopAtPos(0, 293);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 301);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 46);
         break;
      case 43:
         if ((active4 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 302);
         break;
      case 45:
         if ((active4 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 303);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10L);
      case 60:
         if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      case 61:
         if ((active4 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 296);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 297);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 298);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 299);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 313);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 314);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 315);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 316);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 317);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 318);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 319);
         else if ((active5 & 0x1L) != 0L)
            return jjStopAtPos(1, 320);
         break;
      case 62:
         if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2cL);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x44000L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080010018000L, active1, 0xc000001001008L, active2, 0x80808001e50c0000L, active3, 0x9f50a48208000000L, active4, 0x28L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10100000420000L, active1, 0x3200014400000400L, active2, 0x220030008820f31L, active3, 0xac0a04d0418c0cL, active4, 0x301L, active5, 0L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x7020000000040000L, active1, 0x40L, active2, 0x103204610000000L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000L, active1, 0x2002244000L, active2, 0L, active3, 0x100000002210L, active4, 0L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x82080000L, active1, 0x45c04418bcc98000L, active2, 0x401010280260108aL, active3, 0x6003002001a81100L, active4, 0xc2L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40001800000000L, active1, 0x2000000000000L, active2, 0x800000000000000L, active3, 0x10004100000L, active4, 0L, active5, 0L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3c004000000L, active1, 0x880000000004L, active2, 0x100001e004L, active3, 0x2000041L, active4, 0x4L, active5, 0L);
      case 111:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x240301301000L, active1, 0x800000000002030L, active2, 0x100040L, active3, 0x4120020000L, active4, 0L, active5, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8006000000002000L, active1, 0x83L, active2, 0x40000000000L, active3, 0x401800000000L, active4, 0L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0x11220240000800L, active2, 0x2444488000000000L, active3, 0L, active4, 0x10L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000400L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x208c00000000800L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8020100000120200L, active2, 0x1008000000000000L, active3, 0x80L, active4, 0L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000004000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 124:
         if ((active4 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 300);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active5 & 0x10L) != 0L)
            return jjStopAtPos(2, 324);
         break;
      case 61:
         if ((active5 & 0x2L) != 0L)
            return jjStopAtPos(2, 321);
         else if ((active5 & 0x4L) != 0L)
            return jjStopAtPos(2, 322);
         break;
      case 62:
         if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x45c04418bcc88000L, active2, 0x401010280260108aL, active3, 0x6001002001a01100L, active4, 0xc2L, active5, 0L);
      case 97:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 232, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000800c0000L, active1, 0x11220240000000L, active2, 0x254768c610000000L, active3, 0x1000000000L, active4, 0x10L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x4000001000400L, active2, 0x100000000L, active3, 0x1010000000000000L, active4, 0x101L, active5, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20018000L, active3, 0x44000L, active4, 0L, active5, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x8020100100120200L, active2, 0x1008040000000000L, active3, 0x400800000080L, active4, 0L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0x20000000000000L, active3, 0x80000000000000L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1402000000000000L, active1, 0x154L, active2, 0L, active3, 0x4124120000L, active4, 0L, active5, 0L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x400010000000L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0x8f40a48200000000L, active4, 0x28L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040060320000L, active1, 0x10002204000L, active2, 0L, active3, 0x100000000000L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x64004000001000L, active1, 0x80L, active2, 0x40L, active3, 0x2000000080000L, active4, 0L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200201800000000L, active1, 0x800000000000L, active2, 0x4L, active3, 0x2000040L, active4, 0L, active5, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x6100000000000000L, active1, 0x8000000008L, active2, 0x100000L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8002008300L, active1, 0L, active2, 0L, active3, 0xa0000002000L, active4, 0L, active5, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 123, 29);
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10090208014c00L, active1, 0x82000043000L, active2, 0x80808000c50c2000L, active3, 0x631L, active4, 0x4L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000L, active1, 0x2000000000801L, active2, 0x800000000000000L, active3, 0x2L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 119:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 29);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3200004400000000L, active2, 0x200030008820f31L, active3, 0x2c0004d041880cL, active4, 0x200L, active5, 0L);
      case 121:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 29);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 142, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 256, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4080000L, active3, 0L, active4, 0L, active5, 0L);
      case 51:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 264, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80040000L, active3, 0L, active4, 0L, active5, 0L);
      case 52:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 29);
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x41000000L, active3, 0L, active4, 0L, active5, 0L);
      case 61:
         if ((active5 & 0x8L) != 0L)
            return jjStopAtPos(3, 323);
         break;
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0x2000002000L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0x2000002L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4400000000000000L, active2, 0x4000100000000000L, active3, 0x4000000000a00000L, active4, 0x40L, active5, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x804408b8800000L, active2, 0x401008L, active3, 0x1000000001100L, active4, 0x2L, active5, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000088000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1004000000L, active2, 0x10000800008080L, active3, 0x1000000L, active4, 0x80L, active5, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0x10000L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000002000000000L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20060402000L, active1, 0x808000000020L, active2, 0x4L, active3, 0x2400802080042L, active4, 0L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000010000L, active1, 0x8020100000120200L, active2, 0x1008000000000000L, active3, 0x80L, active4, 0L, active5, 0L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2200100L, active2, 0x103204630000000L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 29);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 29);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 29);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x200210008000200L, active1, 0x4080000000000L, active2, 0x400L, active3, 0x421L, active4, 0x204L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000004L, active2, 0L, active3, 0x210L, active4, 0L, active5, 0L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x1000000L, active2, 0x100000000L, active3, 0x1010000000000000L, active4, 0L, active5, 0L);
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 29);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000800001000L, active1, 0x2000000000040L, active2, 0x800000000000000L, active3, 0x80000000000000L, active4, 0L, active5, 0L);
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x11220240000000L, active2, 0x2444488000100000L, active3, 0L, active4, 0x10L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 29);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x6040001000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0x8f40a48200000000L, active4, 0x28L, active5, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000400L, active1, 0x1000L, active2, 0x20000000000000L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x10180000L, active1, 0x80L, active2, 0L, active3, 0xa4120020000L, active4, 0L, active5, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 29);
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x484008000220100L, active1, 0x3200004400004000L, active2, 0x200030008820b31L, active3, 0x2c0004d451a80cL, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10004000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 120:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 206, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 121:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 210, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 29);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 29);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 29);
         break;
      case 51:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 29);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 29);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 29);
         break;
      case 52:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 29);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 29);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 29);
         break;
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4800L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000100000L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xa0000000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0x10000000000000L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3008000000000L, active1, 0x400000L, active2, 0x20002000100000L, active3, 0x2000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000000L, active1, 0x800000000000L, active2, 0x4L, active3, 0x2000040L, active4, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 29);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000800001000L, active1, 0x100000000000000L, active2, 0L, active3, 0x2080006120020000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x88000000200400L, active1, 0x2000001008L, active2, 0x202000L, active3, 0x8000210L, active4, 0L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 29);
         break;
      case 108:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 193, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x41000000L, active1, 0x8000000000000L, active2, 0x2000400L, active3, 0x8f40a48200000000L, active4, 0x228L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000340c8004L, active2, 0x103304610401002L, active3, 0x1000001001100L, active4, 0xc2L);
      case 112:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 29);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 170, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x11220240000000L, active2, 0x2444488000000000L, active3, 0L, active4, 0x10L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x10231000020300L, active1, 0x4400081000000000L, active2, 0x4010000800008080L, active3, 0x4000000000a00421L, active4, 0x4L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 29);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 29);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 29);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 29);
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x10000000120L, active2, 0x10000L, active3, 0x400800080000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x3280444c88800000L, active2, 0x200030008820b39L, active3, 0x2c0004d041880cL, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc50c0000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 209, 29);
         break;
      case 50:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 146, 29);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 152, 29);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 221, 29);
         break;
      case 51:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 147, 29);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 29);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 224, 29);
         break;
      case 52:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 29);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 159, 29);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 230, 29);
         break;
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0x200L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2200000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100L, active1, 0x400000000000000L, active2, 0x20000000L, active3, 0xa00000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 29);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x100000000400000L, active2, 0x20002000000000L, active3, 0x80000000000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x30000000L, active2, 0x401000L, active3, 0x1000000001100L, active4, 0x2L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 29);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8002000000000L, active2, 0L, active3, 0x8f40e48a0c000210L, active4, 0x28L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L, active2, 0x100000200000L, active3, 0L, active4, 0x40L);
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 29);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 29);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 29);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xa0000000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020000000000L, active1, 0x4020L, active2, 0x2008000L, active3, 0x1000000L, active4, 0x80L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L, active2, 0x4L, active3, 0x2000040L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40400000L, active1, 0x91660ac8800000L, active2, 0x244448800010000aL, active3, 0L, active4, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000200000L, active1, 0x1000008L, active2, 0L, active3, 0x1010000000002000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x4004001000000800L, active2, 0x4010000900000080L, active3, 0x4000000000000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0x1000000001L, active4, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x3240004400088004L, active2, 0x200030008830b31L, active3, 0x202c0024d041880cL, active4, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x8004000000L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 29);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x102000000000000L, active1, 0L, active2, 0x2000L, active3, 0x100000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x42000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x103204610000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000001000L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100204010000000L, active3, 0L, active4, 0L);
      case 50:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x3000600000000L, active3, 0L, active4, 0L);
      case 66:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 29);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 29);
         break;
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0x100000000000L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x40L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000000L, active1, 0x2000L, active2, 0L, active3, 0xa0000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000100L, active1, 0L, active2, 0L, active3, 0x2000L, active4, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 29);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000800000000L, active1, 0x3211224670000000L, active2, 0x26444b8008c31f31L, active3, 0x2d0004d041990cL, active4, 0x212L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0xa00000L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0x4000000L, active2, 0x100000L, active3, 0x80400L, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000020L, active2, 0L, active3, 0x210L, active4, 0L);
      case 109:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000088000L, active2, 0x8000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000040000L, active2, 0x4000000000000000L, active3, 0x4000000001000000L, active4, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x100080001000000L, active2, 0x2L, active3, 0x1010001000000001L, active4, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 219, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc000000000800L, active2, 0x20000000L, active3, 0x8f40e48a04100020L, active4, 0x28L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 29);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 181, 29);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 247, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x82440888804000L, active2, 0x800000000000008L, active3, 0x2000002000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200400L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000000800100L, active3, 0x8800a00000008000L, active4, 0L);
      case 50:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20010L, active3, 0x600048000400004L, active4, 0x28L);
      case 51:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x800L, active3, 0x210000800L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000400000L, active2, 0x30000000000L, active3, 0x140000000800000L, active4, 0L);
      case 68:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1204610000000L, active3, 0x200000L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x21L, active3, 0x20000000010000L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200004000000000L, active2, 0x200L, active3, 0x4000440000000L, active4, 0L);
      case 81:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0x8000000000000L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x400800000000L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000088000L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0x210L, active4, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 29);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 29);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 205, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x4208000000000L, active1, 0x2001000000000L, active2, 0x810000800000080L, active3, 0x2000002000100000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80440888800000L, active2, 0x8008L, active3, 0L, active4, 0L);
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80030000000L, active2, 0x401000L, active3, 0x1000000001101L, active4, 0x6L);
      case 110:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8800020800000000L, active1, 0x100000000000000L, active2, 0x4L, active3, 0x20002000440L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x808000001000L, active2, 0x100000000000L, active3, 0x20L, active4, 0L);
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 29);
         break;
      case 114:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x11220241000800L, active2, 0x2444488020000000L, active3, 0x1010000000000000L, active4, 0x50L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x1000000000L, active4, 0L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 29);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0x4000000004000000L, active2, 0x4000000000200400L, active3, 0x4000000005080000L, active4, 0x280L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x220000000000L, active2, 0x40400000000000L, active3, 0L, active4, 0L);
      case 50:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000200000000L, active2, 0x2000080000000000L, active3, 0L, active4, 0L);
      case 51:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0x8000000000L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0L, active4, 0x10L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L, active2, 0x4400000000000000L, active3, 0L, active4, 0x80L);
      case 68:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 225, 29);
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x200000000000110L, active3, 0x8e00840010408804L, active4, 0x28L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000010L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x410000000L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1204200000000L, active3, 0L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000001000000L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80440888804000L, active2, 0x8L, active3, 0L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x30000000L, active2, 0x401000L, active3, 0x1000000001100L, active4, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4080000000000L, active2, 0x21L, active3, 0x110401L, active4, 0x44L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0x1000000000L, active2, 0x10000800000480L, active3, 0L, active4, 0x200L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x20L, active4, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 29);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 29);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 148, 29);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 228, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2002000000L, active3, 0x4200000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400800000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0x4000000L, active2, 0L, active3, 0x8000000000000L, active4, 0L);
      case 108:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000080000L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1001000L, active2, 0x10000L, active3, 0x1010000000000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x400000400400800L, active2, 0x100000002004L, active3, 0x82800040L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x120000c000000000L, active2, 0x200L, active3, 0x24000440000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 29);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8800000000000L, active2, 0x30000000000L, active3, 0x140000000000008L, active4, 0L);
      case 120:
         if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 121:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 157, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 52:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1010000000000000L, active4, 0L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8800000000000000L, active4, 0x28L);
      case 68:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 94, 29);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 167, 29);
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10200000000000L, active2, 0x2040000000000000L, active3, 0L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0x804L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10110L, active3, 0x10408000L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600000000000000L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x840000000000L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x5100000000000000L, active2, 0L, active3, 0x20400800000000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0x30000000000L, active3, 0x140000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0x800000000000000L, active3, 0x80000000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80440888800000L, active2, 0x100000008L, active3, 0x4000000000000208L, active4, 0L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 29);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
      case 104:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x30000000L, active2, 0x409000L, active3, 0x1000001001100L, active4, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0x800000L, active4, 0L);
      case 109:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 103, 29);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0x400L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x600004004004000L, active2, 0x4000000410200200L, active3, 0x4000440000000L, active4, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0x200000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000L, active2, 0x1304202000004L, active3, 0x2000040L, active4, 0L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 29);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0x81000000000L, active2, 0x100008000000a1L, active3, 0x10001L, active4, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L, active2, 0x404000000000000L, active3, 0x20L, active4, 0x10L);
      case 119:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 75, 29);
         break;
      case 120:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 218, 29);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10200000000000L, active2, 0x2040000000000000L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L);
      case 68:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 229, 29);
         break;
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0x200L);
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000000L, active2, 0x400000000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4040000000000000L, active2, 0L, active3, 0x4000000000000020L, active4, 0L);
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 114, 29);
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 156, 29);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 162, 29);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 172, 29);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x20000000000000L, active4, 0L);
      case 101:
         if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 243, 29);
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x2080030000000L, active2, 0x800020000401000L, active3, 0x701000000001101L, active4, 0x6L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000L, active2, 0x4000000000000L, active3, 0L, active4, 0x10L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x21L, active3, 0x840000010000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L, active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0L, active4, 0L);
      case 106:
         if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200004000000000L, active2, 0x200L, active3, 0x4000400000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000000L, active2, 0x4000000000002000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x2000040L, active4, 0L);
      case 110:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 90, 29);
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L, active2, 0x201206200000000L, active3, 0x880804L, active4, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2500000000000000L, active2, 0x10110L, active3, 0x8800000010408008L, active4, 0x28L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 202, 29);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0x200010L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0x200L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80440889800000L, active2, 0x8L, active3, 0x1010000000000000L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 50:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 52:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000040L, active4, 0L);
      case 56:
         if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 244, 29);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 252, 29);
         break;
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0x1L, active4, 0x4L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80440888800000L, active2, 0x8L, active3, 0L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000000L, active2, 0x20000000000L, active3, 0x4000000000000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0x20000000000000L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x860000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600000000000000L, active4, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 59, 29);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 113, 29);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 122, 29);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 185, 29);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 187, 29);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 194, 29);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 203, 29);
         break;
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 112, 29);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 143, 29);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 186, 29);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 216, 29);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8802000000000L, active2, 0xa200021L, active3, 0x110200L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0x80000000L, active4, 0x210L);
      case 104:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 213, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 106:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1200000000000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000001000000000L, active2, 0x4010000800002190L, active3, 0x4000000010408000L, active4, 0x40L);
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 86, 29);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 215, 29);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10200000000000L, active2, 0x2040000000000000L, active3, 0x8800000000000010L, active4, 0xa8L);
      case 116:
         if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(11, 197, 29);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x30000000L, active2, 0x401000L, active3, 0x1000000001100L, active4, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x8L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 51:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 54:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(12, 88, 29);
         break;
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1200000000000L, active3, 0x8L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0x1000000001000L, active4, 0x2L);
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x8800000000000010L, active4, 0x28L);
      case 100:
         if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 263, 29);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0x840000000000L, active4, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 45, 29);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0L, active4, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0x20000080000000L, active4, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 106:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 12;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 12;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10408000L, active4, 0L);
      case 108:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 149, 29);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 233, 29);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000001000L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000001000000000L, active2, 0x10000800000080L, active3, 0x4000000000000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x280440888804000L, active2, 0x20000000008L, active3, 0x4000000000000L, active4, 0x40L);
      case 113:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 115, 29);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 190, 29);
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10206000080000L, active2, 0x2040000000000021L, active3, 0x400100200L, active4, 0L);
      case 116:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 155, 29);
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0x200000000000001L, active4, 0x4L);
      case 120:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 153, 29);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x2000040L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2, active3, active4, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 50:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(13, 160, 29);
         break;
      case 56:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(13, 198, 29);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 217, 29);
         break;
      case 67:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x1L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x10408000L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa14_0(active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active1, 0x80000000000L, active2, 0x21L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x10204020004000L, active2, 0x2040002000000000L, active3, 0x101000400001000L, active4, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x10L, active4, 0L);
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 13;
         }
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 169, 29);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x4004000000000000L, active4, 0L);
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 118, 29);
         break;
      case 102:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x200L, active3, 0x20000000000000L, active4, 0L);
      case 103:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 126, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x80000L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0x180440888800000L, active2, 0x1200000000008L, active3, 0x840000000008L, active4, 0L);
      case 114:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 178, 29);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(13, 260, 29);
         return jjMoveStringLiteralDfa14_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x80000200L, active4, 0x200L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 76, 29);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 101, 29);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 141, 29);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa14_0(active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 13;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2, active3, active4, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa15_0(active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 54:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(14, 130, 29);
         break;
      case 79:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0x4000000800000000L, active4, 0x4L);
      case 100:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 14;
         }
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 173, 29);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 176, 29);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(14, 195, 29);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(14, 262, 29);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x100000400000000L, active4, 0L);
      case 101:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(14, 201, 29);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x80100001L, active4, 0x200L);
      case 102:
         return jjMoveStringLiteralDfa15_0(active1, 0x80000000000L, active2, 0x21L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x10408100L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0x80440888800000L, active2, 0x2000000008L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x200L, active3, 0x20000000000000L, active4, 0L);
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(14, 78, 29);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(14, 196, 29);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 211, 29);
         return jjMoveStringLiteralDfa15_0(active1, 0x20000000L, active2, 0x10000L, active3, 0x1000000001000L, active4, 0x2L);
      case 119:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 234, 29);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 239, 29);
         break;
      case 120:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 83, 29);
         break;
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 109, 29);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 116, 29);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 182, 29);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 189, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2, active3, active4, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 111, 29);
         break;
      case 79:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L);
      case 100:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(15, 207, 29);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(15, 214, 29);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(15, 220, 29);
         return jjMoveStringLiteralDfa16_0(active1, 0x80440888800000L, active2, 0x8L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x200L, active3, 0x20000000000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa16_0(active1, 0x80000000000L, active2, 0x21L, active3, 0x4000000000000L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 108:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(15, 227, 29);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x1L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x100000000000000L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000000L, active2, 0L, active3, 0x4001000000001000L, active4, 0x2L);
      case 116:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(15, 223, 29);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(15, 265, 29);
         return jjMoveStringLiteralDfa16_0(active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0L, active4, 0L);
      case 120:
         if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(15, 212, 29);
         break;
      case 121:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2, active3, active4, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(16, 87, 29);
         break;
      case 49:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(16, 91, 29);
         break;
      case 50:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(16, 95, 29);
         break;
      case 51:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(16, 99, 29);
         break;
      case 52:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 106, 29);
         break;
      case 53:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 110, 29);
         break;
      case 54:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 119, 29);
         break;
      case 55:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(16, 131, 29);
         break;
      case 67:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x4000400000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000000L, active2, 0L, active3, 0x1000000001000L, active4, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4L);
      case 114:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 120, 29);
         return jjMoveStringLiteralDfa17_0(active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0x80000000000L, active2, 0x21L, active3, 0L, active4, 0L);
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(16, 137, 29);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 245, 29);
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x1L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 119:
         if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 248, 29);
         break;
      case 121:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2, active3, active4, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x8L);
      case 101:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(17, 144, 29);
         return jjMoveStringLiteralDfa18_0(active1, 0x80000000000L, active2, 0x21L, active3, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x1000000000L, active2, 0x10000800000080L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x2000000000L, active3, 0x200000000000000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x1L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L);
      case 120:
         if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active1, 0x20000000L, active2, 0L, active3, 0x1000000000000L, active4, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2, active3, active4, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa19_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(18, 258, 29);
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x4800000000000001L, active4, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 107, 29);
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active1, 0x10000000L, active2, 0x401020L, active3, 0x100L, active4, 0L);
      case 119:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 249, 29);
         break;
      case 120:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active1, 0x1000000000L, active2, 0x10000800000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, active2, active3, active4, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa20_0(active1, 0x1000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x101L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(19, 133, 29);
         break;
      case 116:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 242, 29);
         break;
      case 119:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 251, 29);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(19, 259, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(18, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, active2, active3, active4, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 100:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(20, 192, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x1000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x4000000000000100L, active4, 0L);
      case 114:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 165, 29);
         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(20, 226, 29);
         break;
      case 118:
         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(19, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, active2, active3, active4, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active1, 0x30000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 114:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 254, 29);
         break;
      case 118:
         return jjMoveStringLiteralDfa22_0(active1, 0x1000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(20, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, active2, active3, active4, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa23_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active1, 0x1000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa23_0(active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa23_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(21, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, active2, active3, active4, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa24_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa24_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa24_0(active1, 0x1000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa24_0(active1, 0L, active2, 0x800000000L, active3, 0x1000000000000L, active4, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa24_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(22, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, active2, active3, active4, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 24;
         }
         return jjMoveStringLiteralDfa25_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa25_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa25_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa25_0(active1, 0x1000000000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa25_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(23, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1, active2, active3, active4, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa26_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2L);
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 25;
         }
         return jjMoveStringLiteralDfa26_0(active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa26_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa26_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa26_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa26_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(24, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1, active2, active3, active4, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa27_0(active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(26, 93, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa27_0(active1, 0x10000000L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa27_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa27_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa27_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(25, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, active1, active2, active3, active4, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2L);
      case 101:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(27, 163, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa28_0(active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 27;
         }
         return jjMoveStringLiteralDfa28_0(active1, 0L, active2, 0x401000L, active3, 0x100L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa28_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(26, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, active2, active3, active4, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa29_0(active2, 0x401000L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa29_0(active2, 0L, active3, 0x100L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa29_0(active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa29_0(active2, 0L, active3, 0L, active4, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa29_0(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, active2, active3, active4, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa30_0(active2, 0x10000000401000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa30_0(active2, 0L, active3, 0x100L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa30_0(active2, 0L, active3, 0L, active4, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa30_0(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, active2, active3, active4, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa31_0(active2, 0L, active3, 0x100L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa31_0(active2, 0L, active3, 0L, active4, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa31_0(active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa31_0(active2, 0x401000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa31_0(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, active2, active3, active4, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa32_0(active2, 0x401000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa32_0(active2, 0L, active3, 0x100L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa32_0(active2, 0L, active3, 0L, active4, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa32_0(active2, 0x10000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa32_0(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, active2, active3, active4, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa33_0(active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa33_0(active2, 0x401000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa33_0(active2, 0L, active3, 0x100L, active4, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa33_0(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, active2, active3, active4, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 101:
         if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(33, 257, 29);
         break;
      case 112:
         return jjMoveStringLiteralDfa34_0(active2, 0L, active3, 0x100L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa34_0(active2, 0x10000000401000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa34_0(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, active2, active3, 0L, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 34;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(34, 180, 29);
         return jjMoveStringLiteralDfa35_0(active2, 0x400000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa35_0(active2, 0L, active3, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, active2, active3, 0L, 0L);
}
private final int jjMoveStringLiteralDfa35_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, active2, active3, 0L, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa36_0(active2, 0x400000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa36_0(active2, 0L, active3, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, active2, active3, 0L, 0L);
}
private final int jjMoveStringLiteralDfa36_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, active2, active3, 0L, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(36, 200, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa37_0(active2, 0x400000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, active2, active3, 0L, 0L);
}
private final int jjMoveStringLiteralDfa37_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, active2, 0L, 0L, 0L);
      return 37;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa38_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, active2, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa38_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, active2, 0L, 0L, 0L);
      return 38;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa39_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, active2, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa39_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, active2, 0L, 0L, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa40_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, active2, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa40_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, active2, 0L, 0L, 0L);
      return 40;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa41_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, active2, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa41_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, active2, 0L, 0L, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa42_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, active2, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa42_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, active2, 0L, 0L, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa43_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, active2, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa43_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, active2, 0L, 0L, 0L);
      return 43;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(43, 150, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, active2, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec43 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec44 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec45 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec46 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec47 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec48 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec49 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec50 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec51 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec52 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec53 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec54 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec56 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec57 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec58 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec60 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec61 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 36)
                  {
                     if (kind > 277)
                        kind = 277;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                     jjAddStates(12, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 266)
                        kind = 266;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 266)
                        kind = 266;
                     jjCheckNAddStates(14, 18);
                  }
                  break;
               case 48:
                  if (curChar == 47)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddStates(22, 24);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(12, 13);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 275)
                     kind = 275;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 23:
                  if (curChar == 34 && kind > 276)
                     kind = 276;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 277)
                     kind = 277;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 277)
                     kind = 277;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 9);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddTwoStates(38, 9);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar != 46)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddStates(32, 34);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddStates(32, 34);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddTwoStates(44, 9);
                  break;
               case 45:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 46:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 49:
                  if (curChar != 47)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(19, 21);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(19, 21);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 52:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar != 48)
                     break;
                  if (kind > 266)
                     kind = 266;
                  jjCheckNAddStates(14, 18);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  jjCheckNAddTwoStates(56, 3);
                  break;
               case 57:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  jjCheckNAddTwoStates(57, 3);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 60:
                  if (curChar == 46)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddTwoStates(64, 9);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 67:
                  if (curChar == 46)
                     jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 270)
                     kind = 270;
                  jjCheckNAddTwoStates(70, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 277)
                     kind = 277;
                  jjCheckNAdd(29);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 266)
                     kind = 266;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 270)
                     kind = 270;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(42, 44);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 29:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 277)
                     kind = 277;
                  jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 47:
                  if (kind > 2)
                     kind = 2;
                  break;
               case 50:
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(19, 21);
                  break;
               case 55:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  jjCheckNAddTwoStates(56, 3);
                  break;
               case 58:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 62:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 65:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 68:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 277)
                     kind = 277;
                  jjCheckNAdd(29);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 11);
                  break;
               case 29:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 277)
                     kind = 277;
                  jjCheckNAdd(29);
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 2)
                     kind = 2;
                  break;
               case 50:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   31, 32, 9, 35, 36, 39, 40, 48, 49, 20, 21, 23, 11, 13, 55, 57, 
   3, 58, 65, 50, 51, 53, 5, 6, 9, 20, 21, 25, 23, 31, 32, 9, 
   41, 42, 9, 59, 60, 66, 67, 68, 7, 8, 14, 15, 17, 22, 24, 26, 
   33, 34, 37, 38, 43, 44, 61, 62, 63, 64, 69, 70, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec61[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\141\164\164\162\151\142\165\164\145", 
"\141\165\164\157", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\145\156\164\162\157\151\144", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156", "\151\156\157\165\164", 
"\151\156\163\164\141\156\143\145\157\146", "\151\156\164\145\162\146\141\143\145", 
"\151\156\166\141\162\151\141\156\164", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\157\160\145\162\163\160\145\143\164\151\166\145", "\156\165\154\154", "\157\165\164", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\155\157\157\164\150", 
"\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\165\156\151\146\157\162\155", 
"\166\141\162\171\151\156\147", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\143\162\157\163\163", "\146\167\151\144\164\150", "\142\166\145\143\62", 
"\166\145\143\64", "\165\163\165\142\102\157\162\162\157\167", 
"\155\141\164\162\151\170\103\157\155\160\115\165\154\164", "\156\157\164\105\161\165\141\154", 
"\165\151\156\164\102\151\164\163\124\157\106\154\157\141\164", "\147\154\137\116\157\162\155\141\154", "\141\154\154", "\142\166\145\143\63", 
"\142\151\164\103\157\165\156\164", "\147\154\137\116\157\162\155\141\154\115\141\164\162\151\170", 
"\142\166\145\143\64", "\146\151\156\144\114\123\102", 
"\147\154\137\102\141\143\153\103\157\154\157\162", "\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\60", 
"\160\141\143\153\125\156\157\162\155\62\170\61\66", "\146\151\156\144\115\123\102", 
"\147\154\137\120\157\163\151\164\151\157\156", "\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\61", 
"\147\154\137\115\157\144\145\154\126\151\145\167\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170", 
"\147\154\137\115\157\144\145\154\126\151\145\167\115\141\164\162\151\170\124\162\141\156\163\160\157\163\145", "\165\163\141\155\160\154\145\162\63\104", 
"\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\62", "\154\144\145\170\160", "\165\163\141\155\160\154\145\162\62\104", 
"\164\145\170\164\165\162\145\114\157\144", "\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\63", 
"\147\154\137\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170\111\156\166\145\162\163\145", "\142\151\164\146\151\145\154\144\111\156\163\145\162\164", 
"\164\145\170\164\165\162\145\120\162\157\152\107\162\141\144", "\146\164\162\141\156\163\146\157\162\155", "\154\145\156\147\164\150", 
"\165\163\141\155\160\154\145\162\61\104", "\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\64", 
"\151\156\164\145\162\160\157\154\141\164\145\101\164\117\146\146\163\145\164", "\151\166\145\143\62", 
"\151\163\141\155\160\154\145\162\61\104\101\162\162\141\171", "\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\65", 
"\165\156\160\141\143\153\104\157\165\142\154\145\62\170\63\62", "\165\163\141\155\160\154\145\162\103\165\142\145", 
"\165\155\165\154\105\170\164\145\156\144\145\144", "\146\141\143\145\146\157\162\167\141\162\144", 
"\163\141\155\160\154\145\162\102\165\146\146\145\162", "\151\163\141\155\160\154\145\162\62\104\101\162\162\141\171", 
"\151\166\145\143\63", "\147\154\137\116\157\162\155\141\154\123\143\141\154\145", 
"\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\66", "\147\154\137\123\145\143\157\156\144\141\162\171\103\157\154\157\162", 
"\164\145\170\164\165\162\145\120\162\157\152\114\157\144", "\147\154\137\106\162\141\147\103\157\157\162\144", "\144\157\164", 
"\164\145\170\164\165\162\145\107\162\141\144", "\164\145\170\164\165\162\145\63\104\120\162\157\152", 
"\147\154\137\106\162\157\156\164\106\141\143\151\156\147", "\151\166\145\143\64", 
"\164\145\170\164\165\162\145\107\141\164\150\145\162\117\146\146\163\145\164", "\147\154\137\103\157\154\157\162", 
"\165\156\160\141\143\153\125\156\157\162\155\62\170\61\66", "\147\154\137\115\165\154\164\151\124\145\170\103\157\157\162\144\67", 
"\164\145\170\164\165\162\145\62\104\120\162\157\152", 
"\164\145\170\164\165\162\145\107\141\164\150\145\162\117\146\146\163\145\164\163", "\142\157\157\154", 
"\147\154\137\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170", "\164\145\170\164\165\162\145\61\104\120\162\157\152", 
"\164\145\170\164\165\162\145\120\162\157\152\117\146\146\163\145\164", "\164\145\170\145\154\106\145\164\143\150", 
"\164\145\170\164\165\162\145\63\104", 
"\147\154\137\115\157\144\145\154\126\151\145\167\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170\111\156\166\145\162\163\145", "\151\156\164\102\151\164\163\124\157\106\154\157\141\164", "\141\156\171", 
"\105\156\144\120\162\151\155\151\164\151\166\145", "\105\156\144\123\164\162\145\141\155\120\162\151\155\151\164\151\166\145", 
"\164\145\170\164\165\162\145\62\104", "\155\141\164\63\170\62", "\155\141\164\62\170\63", 
"\156\157\162\155\141\154\151\172\145", "\147\154\137\114\151\147\150\164\115\157\144\145\154", 
"\147\154\137\115\157\144\145\154\126\151\145\167\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170\111\156\166\145\162\163\145\124\162\141\156\163\160\157\163\145", "\164\145\170\164\165\162\145\61\104", "\155\141\164\64\170\62", 
"\147\154\137\103\154\151\160\126\145\162\164\145\170", "\155\141\164\62\170\64", 
"\164\145\170\164\165\162\145\117\146\146\163\145\164", "\163\150\141\144\157\167\61\104\114\157\144", 
"\165\141\144\144\103\141\162\162\171", "\155\141\164\64\170\63", "\155\141\164\63\170\64", 
"\160\141\143\153\104\157\165\142\154\145\62\170\63\62", "\163\150\141\144\157\167\62\104\120\162\157\152", 
"\163\150\141\144\157\167\62\104\114\157\144", 
"\147\154\137\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170\124\162\141\156\163\160\157\163\145", "\151\156\164", 
"\147\154\137\102\141\143\153\123\145\143\157\156\144\141\162\171\103\157\154\157\162", "\163\150\141\144\157\167\61\104\120\162\157\152", 
"\151\163\141\155\160\154\145\162\63\104", "\164\145\170\164\165\162\145\103\165\142\145", 
"\164\145\170\164\165\162\145\103\165\142\145\114\157\144", "\146\162\145\170\160", "\151\163\141\155\160\154\145\162\62\104", 
"\147\154\137\106\157\147\103\157\157\162\144", "\163\150\141\144\157\167\61\104\120\162\157\152\114\157\144", 
"\151\163\141\155\160\154\145\162\61\104", "\155\141\164\62", 
"\163\150\141\144\157\167\62\104\120\162\157\152\114\157\144", "\163\150\141\144\157\167\62\104", 
"\165\163\141\155\160\154\145\162\102\165\146\146\145\162", "\165\166\145\143\62", 
"\147\154\137\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170\111\156\166\145\162\163\145\124\162\141\156\163\160\157\163\145", "\162\145\146\162\141\143\164", 
"\165\163\141\155\160\154\145\162\61\104\101\162\162\141\171", "\155\141\164\63", "\163\150\141\144\157\167\61\104", 
"\164\145\170\164\165\162\145\61\104\114\157\144", "\151\163\141\155\160\154\145\162\103\165\142\145", 
"\151\155\165\154\105\170\164\145\156\144\145\144", "\165\166\145\143\63", 
"\165\163\141\155\160\154\145\162\62\104\101\162\162\141\171", "\147\154\137\106\162\157\156\164\103\157\154\157\162", "\155\141\164\64", 
"\151\156\164\145\162\160\157\154\141\164\145\101\164\103\145\156\164\162\157\151\144", "\145\161\165\141\154", "\164\145\170\164\165\162\145\62\104\114\157\144", 
"\164\145\170\164\165\162\145\121\165\145\162\171\114\157\144", "\142\151\164\146\151\145\154\144\105\170\164\162\141\143\164", 
"\157\165\164\145\162\120\162\157\144\165\143\164", "\165\156\160\141\143\153\125\156\157\162\155\64\170\70", 
"\165\166\145\143\64", 
"\147\154\137\115\157\144\145\154\126\151\145\167\120\162\157\152\145\143\164\151\157\156\115\141\164\162\151\170\124\162\141\156\163\160\157\163\145", "\142\151\164\146\151\145\154\144\122\145\166\145\162\163\145", 
"\144\145\164\145\162\155\151\156\141\156\164", "\164\145\170\164\165\162\145\63\104\114\157\144", 
"\147\154\137\115\157\144\145\154\126\151\145\167\115\141\164\162\151\170", "\144\151\163\164\141\156\143\145", "\144\106\144\170", 
"\164\145\170\164\165\162\145\61\104\120\162\157\152\114\157\144", "\164\145\170\164\165\162\145\107\141\164\150\145\162", 
"\156\157\151\163\145\61", "\144\106\144\171", 
"\146\154\157\141\164\102\151\164\163\124\157\125\151\156\164", "\105\155\151\164\123\164\162\145\141\155\126\145\162\164\145\170", 
"\147\154\137\106\162\141\147\104\145\160\164\150", "\164\145\170\164\165\162\145\62\104\120\162\157\152\114\157\144", 
"\147\154\137\106\162\141\147\103\157\154\157\162", "\147\154\137\120\157\151\156\164\123\151\172\145", 
"\165\156\160\141\143\153\123\156\157\162\155\64\170\70", "\105\155\151\164\126\145\162\164\145\170", "\142\141\162\162\151\145\162", 
"\164\145\170\164\165\162\145\63\104\120\162\157\152\114\157\144", "\156\157\151\163\145\62", "\164\145\170\164\165\162\145\120\162\157\152", 
"\164\145\170\164\165\162\145\114\157\144\117\146\146\163\145\164", "\156\157\151\163\145\63", "\163\141\155\160\154\145\162\63\104", 
"\164\145\170\164\165\162\145\120\162\157\152\107\162\141\144\117\146\146\163\145\164", "\147\162\145\141\164\145\162\124\150\141\156\105\161\165\141\154", 
"\164\162\141\156\163\160\157\163\145", "\147\154\137\126\145\162\164\145\170\111\104", "\156\157\151\163\145\64", 
"\163\141\155\160\154\145\162\62\104", "\146\155\141", "\154\145\163\163\124\150\141\156\105\161\165\141\154", 
"\163\141\155\160\154\145\162\62\104\123\150\141\144\157\167", "\154\145\163\163\124\150\141\156", "\165\151\156\164", 
"\163\141\155\160\154\145\162\61\104", "\147\162\145\141\164\145\162\124\150\141\156", 
"\163\141\155\160\154\145\162\61\104\123\150\141\144\157\167", 
"\147\154\137\115\157\144\145\154\126\151\145\167\115\141\164\162\151\170\111\156\166\145\162\163\145", "\146\154\157\141\164", 
"\164\145\170\164\165\162\145\120\162\157\152\114\157\144\117\146\146\163\145\164", "\164\145\170\164\165\162\145\123\151\172\145", 
"\160\141\143\153\125\156\157\162\155\64\170\70", "\164\145\170\164\165\162\145\107\162\141\144\117\146\146\163\145\164", 
"\163\141\155\160\154\145\162\103\165\142\145", "\162\145\146\154\145\143\164", 
"\163\141\155\160\154\145\162\103\165\142\145\123\150\141\144\157\167", "\163\141\155\160\154\145\162\62\104\122\145\143\164\123\150\141\144\157\167", 
"\163\141\155\160\154\145\162\62\104\122\145\143\164", 
"\163\141\155\160\154\145\162\61\104\101\162\162\141\171\123\150\141\144\157\167", "\160\141\143\153\123\156\157\162\155\64\170\70", 
"\147\154\137\126\145\162\164\145\170", 
"\147\154\137\106\162\157\156\164\123\145\143\157\156\144\141\162\171\103\157\154\157\162", "\163\141\155\160\154\145\162\61\104\101\162\162\141\171", "\166\145\143\62", 
"\147\154\137\115\157\144\145\154\126\151\145\167\115\141\164\162\151\170\111\156\166\145\162\163\145\124\162\141\156\163\160\157\163\145", 
"\151\156\164\145\162\160\157\154\141\164\145\101\164\123\141\155\160\154\145", 
"\163\141\155\160\154\145\162\62\104\101\162\162\141\171\123\150\141\144\157\167", "\151\163\141\155\160\154\145\162\102\165\146\146\145\162", 
"\163\141\155\160\154\145\162\62\104\101\162\162\141\171", "\147\154\137\106\157\147\106\162\141\147\103\157\157\162\144", 
"\147\154\137\120\157\151\156\164\103\157\157\162\144", "\166\145\143\63", 
"\164\145\170\145\154\106\145\164\143\150\117\146\146\163\145\164", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", 
"\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", "\76\76\76", 
"\76\76", "\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff73L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffff3847ffL, 0xffL, 
};
static final long[] jjtoMore = {
   0x8cL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[71];
private final int[] jjstateSet = new int[142];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JavaParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JavaParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 71; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 325 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[325]);
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
         break;
      case 326 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[326]);
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
         break;
      default : 
         break;
   }
}
}
